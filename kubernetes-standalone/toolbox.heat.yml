#
##
### Written by the CAT team
##
#
heat_template_version: 2013-05-23

description: Kubernetes for Cloudwatt


parameters:
  keypair_name:
    description: Keypair to inject in instance
    label: SSH Keypair
    type: string

  domain:
    description: Wildcarded domain, ex example.com must have a *.example.com DNS entry
    default: cluster.local
    label: Cloud DNS
    type: string

  flavor_master:
    default: n1.cw.standard-4
    description: Flavor to use for the deployed instance
    type: string
    label: Master Instance Type (Flavor)
    constraints:
      - allowed_values:
          - n1.cw.standard-1
          - n1.cw.standard-2
          - n1.cw.standard-4
          - n1.cw.standard-8
          - n1.cw.standard-12
          - n1.cw.standard-16

  flavor_node:
    default: n1.cw.standard-4
    description: Flavor to use for the deployed instance
    type: string
    label: Node Instance Type (Flavor)
    constraints:
      - allowed_values:
          - n1.cw.standard-1
          - n1.cw.standard-2
          - n1.cw.standard-4
          - n1.cw.standard-8
          - n1.cw.standard-12
          - n1.cw.standard-16

  node_count:
    default: 3
    label: Node Count
    description: Additional node counts
    type: number
    constraints:
      - range: { min: 1, max: 3 }

resources:

  network:
    type: OS::Neutron::Net

  subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: network }
      ip_version: 4
      cidr: 10.0.0.0/16
      allocation_pools:
        - { start: 10.0.1.100, end: 10.0.1.199 }

  router:
    type: OS::Neutron::Router
    properties:
      admin_state_up: true
      external_gateway_info:
        enable_snat: true
        network: "public"

  toolbox_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: subnet }

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - { direction: ingress, remote_ip_prefix : 10.0.0.0/16, protocol: TCP, port_range_min: 1, port_range_max: 65535 }
        - { direction: ingress, remote_ip_prefix : 10.0.0.0/16, protocol: UDP, port_range_min: 1, port_range_max: 65535 }
        - { direction: ingress, remote_ip_prefix : 0.0.0.0/0, protocol: TCP, port_range_min: 22, port_range_max: 22 }
        - { direction: ingress, remote_ip_prefix : 0.0.0.0/0, protocol: TCP, port_range_min: 443, port_range_max: 443 }
        - { direction: ingress, protocol: ICMP }
        - { direction: ingress, protocol: UDP }
        - { direction: egress }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: 6ea98324-0f14-49f6-97c0-885d1b8dc517

  masters:
    type: OS::Heat::ResourceGroup
    properties:
      count: 1
      resource_def:
        type: kube-master.heat.yaml
        properties:
          nodename:
            str_replace:
              template: $stack-master-%index%
              params:
                $stack: { get_param: 'OS::stack_name' }
          domain: { get_param: domain }
          subnet: { get_resource: subnet }
          security_group: { get_resource: security_group }
          network: { get_resource: network }
          keypair_name: { get_param: keypair_name }
          flavor_name: { get_param: flavor_master }
          floating_ip: { get_resource: floating_ip }
          public_ip: { get_attr: [floating_ip, floating_ip_address] }

  nodes:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: node_count }
      resource_def:
        type: kube-node.heat.yaml
        properties:
          domain: { get_param: domain }
          master: 10.0.1.254
          subnet: { get_resource: subnet }
          nodeip: 10.0.1.1%index%
          security_group: { get_resource: security_group }
          network: { get_resource: network }
          nodename:
            str_replace:
              template: $stack-node-%index%
              params:
                $stack: { get_param: 'OS::stack_name' }
          keypair_name: { get_param: keypair_name }
          flavor_name: { get_param: flavor_node }

outputs:
  public_ip:
    description: Master IP
    value: { get_attr: [floating_ip, floating_ip_address] }
