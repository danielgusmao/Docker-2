#
##
### Written by the CAT team
##
#
heat_template_version: 2013-05-23

description: Kubernetes HA


parameters:
  keypair_name:
    description: Keypair to inject in instance
    label: SSH Keypair
    type: string

  os_username:
    description: OpenStack Username
    label: OpenStack Username
    type: string

  os_password:
    description: OpenStack Password
    label: OpenStack Password
    type: string
    hidden: true

  os_tenant:
    description: OpenStack Tenant Name
    label: OpenStack Tenant Name
    type: string

  os_auth:
    description: OpenStack Auth URL
    default: https://identity.fr1.cloudwatt.com/v2.0
    label: OpenStack Auth URL
    type: string

  domain:
    description: Wildcarded domain, ex example.com must have a *.example.com DNS entry
    default: cluster.local
    label: Cloud DNS
    type: string

  flavor_master:
    default: s1.cw.small-1
    description: Flavor to use for the deployed instance
    type: string
    label: Master Instance Type (Flavor)
    constraints:
      - allowed_values:
          - s1.cw.small-1
          - n1.cw.standard-1
          - n2.cw.standard-1
          - n1.cw.standard-2
          - n1.cw.standard-4
          - n1.cw.standard-8
          - n1.cw.standard-12
          - n1.cw.standard-16

  flavor_node:
    default: n2.cw.standard-1
    description: Flavor to use for the deployed instance
    type: string
    label: Node Instance Type (Flavor)
    constraints:
      - allowed_values:
          - n1.cw.standard-1
          - n2.cw.standard-1
          - n1.cw.standard-2
          - n1.cw.standard-4
          - n1.cw.standard-8
          - n1.cw.standard-12
          - n1.cw.standard-16

  node_count:
    default: 3
    label: Node Count
    description: Additional node counts
    type: number
    constraints:
      - range: { min: 1, max: 10 }

  master_count:
    default: 2
    label: Master Count
    description: Additional master counts
    type: number
    constraints:
      - range: { min: 1, max: 3 }

resources:

  network:
    type: OS::Neutron::Net

  subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: network }
      ip_version: 4
      cidr: 10.0.0.0/16
      allocation_pools:
        - { start: 10.0.1.100, end: 10.0.1.199 }

  router:
    type: OS::Neutron::Router
    properties:
      admin_state_up: true
      external_gateway_info:
        enable_snat: true
        network: "public"

  stack_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: subnet }

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - { direction: ingress, remote_ip_prefix : 10.0.0.0/16, protocol: TCP, port_range_min: 1, port_range_max: 65535 }
        - { direction: ingress, remote_ip_prefix : 10.0.0.0/16, protocol: UDP, port_range_min: 1, port_range_max: 65535 }
        - { direction: ingress, remote_ip_prefix : 0.0.0.0/0, protocol: TCP, port_range_min: 22, port_range_max: 22 }
        - { direction: ingress, remote_ip_prefix : 0.0.0.0/0, protocol: TCP, port_range_min: 80, port_range_max: 80 }
        - { direction: ingress, protocol: ICMP }
        - { direction: egress }

  drivers:
    type: OS::Heat::ResourceGroup
    properties:
      count: 3
      resource_def:
        type: http://storage.fr1.cloudwatt.net:8080/v1/AUTH_772be1ffb32e42a28ac8e0205c0b0b90/kube-ha-fr1/kube-driver.heat.yaml
        properties:
          subnet: { get_resource: subnet }
          security_group: { get_resource: security_group }
          network: { get_resource: network }
          nodeip: 10.0.1.24%index%
          stack: { get_param: 'OS::stack_name' }
          os_username: { get_param: os_username }
          os_password: { get_param: os_password }
          os_tenant: { get_param: os_tenant }
          os_auth: { get_param: os_auth }
          os_region: fr1
          nodename:
            str_replace:
              template: $stack-driver-%index%
              params:
                $stack: { get_param: 'OS::stack_name' }
          nodeid: "%index%"
          keypair_name: { get_param: keypair_name }
          mastercount: { get_param: master_count }
          domain: { get_param: domain }

  masters:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: master_count }
      resource_def:
        type: http://storage.fr1.cloudwatt.net:8080/v1/AUTH_772be1ffb32e42a28ac8e0205c0b0b90/kube-ha-fr1/kube-master.heat.yaml
        properties:
          nodename:
            str_replace:
              template: $stack-master-%index%
              params:
                $stack: { get_param: 'OS::stack_name' }
          nodeip: 10.0.1.25%index%
          stack: { get_param: 'OS::stack_name' }
          domain: { get_param: domain }
          subnet: { get_resource: subnet }
          security_group: { get_resource: security_group }
          network: { get_resource: network }
          keypair_name: { get_param: keypair_name }
          flavor_name: { get_param: flavor_master }
          pool_id: {get_resource: pool_masters}
          os_username: { get_param: os_username }
          os_password: { get_param: os_password }
          os_tenant: { get_param: os_tenant }
          os_auth: { get_param: os_auth }
          os_region: fr1
          os_tenant_id: { get_param: 'OS::project_id' }

  pool_masters:
    type: OS::Neutron::Pool
    properties:
      name: pool_masters
      protocol: TCP
      lb_method: ROUND_ROBIN
      subnet: { get_resource: subnet }
      vip:
        name: master_lb
        address: 10.0.1.3
        protocol_port: 443
        subnet: { get_resource: subnet }

  lb_master:
    type: OS::Neutron::LoadBalancer
    properties:
      pool_id: { get_resource: pool_masters }
      protocol_port: 443


  nodes:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: node_count }
      resource_def:
        type: http://storage.fr1.cloudwatt.net:8080/v1/AUTH_772be1ffb32e42a28ac8e0205c0b0b90/kube-ha-fr1/kube-node.heat.yaml
        properties:
          domain: { get_param: domain }
          master: { get_attr: [pool_masters, vip, address] }
          subnet: { get_resource: subnet }
          nodeip: 10.0.1.1%index%
          security_group: { get_resource: security_group }
          network: { get_resource: network }
          stack: { get_param: 'OS::stack_name' }
          os_username: { get_param: os_username }
          os_password: { get_param: os_password }
          os_tenant: { get_param: os_tenant }
          os_auth: { get_param: os_auth }
          os_region: fr1
          os_tenant_id: { get_param: 'OS::project_id' }
          nodename:
            str_replace:
              template: $stack-node-%index%
              params:
                $stack: { get_param: 'OS::stack_name' }
          keypair_name: { get_param: keypair_name }
          flavor_name: { get_param: flavor_node }

outputs:
  public_ip:
    description: Masters IP
    value: { get_attr: [masters, public_ip] }
